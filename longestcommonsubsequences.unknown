#using recurssion

def lcs(S1, S2, m, n):

	if m == 0 or n == 0:
		return 0;
	elif S1[m-1] == S2[n-1]:
		return 1 + lcs(S1, S2, m-1, n-1);
	else:
		return max(lcs(S1, S2, m, n-1), lcs(S1, S2, m-1, n));

S1 = "stocks"
S2 = "longests"
print (lcs(S1, S2, len(S1), len(S2)))


#using dynamic programming

def lcs(S1, S2):
    m = len(S1)
    n = len(S2)

    L = [[None]*(n + 1) for i in range(m + 1)]

    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0:
                L[i][j] = 0
            elif S1[i-1] == S2[j-1]:
                L[i][j] = L[i-1][j-1]+1
            else:
                L[i][j] = max(L[i-1][j], L[i][j-1])
    return L[m][n]

S1 = "stone"
S2 = "longest"

print(lcs(S1, S2))
