n = 8

def isSafe(x, y, board):
    return True if 0 <= x < n and 0 <= y < n and board[x][y] == -1 else False

def printSolution(board):
    for row in board:
        print(' '.join(map(str, row)))

def solveKT(n):
    board = [[-1 for _ in range(n)] for _ in range(n)]
    
    move_x = [2, 1, -1, -2, -2, -1, 1, 2]
    move_y = [1, 2, 2, 1, -1, -2, -2, -1]
    
    board[0][0] = 0
    
    if not solveKTUtil(board, 0, 0, move_x, move_y, 1):
        print("Solution does not exist")
    else:
        printSolution(board)

def solveKTUtil(board, curr_x, curr_y, move_x, move_y, pos):
    if pos == n**2:
        return True

    for i in range(8):
        new_x, new_y = curr_x + move_x[i], curr_y + move_y[i]
        
        if isSafe(new_x, new_y, board):
            board[new_x][new_y] = pos
            
            if solveKTUtil(board, new_x, new_y, move_x, move_y, pos+1):
                return True
            
            board[new_x][new_y] = -1

    return False

solveKT(n)
